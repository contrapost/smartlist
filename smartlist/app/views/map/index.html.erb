
<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
      <%= stylesheet_link_tag 'application' %>
      <%= javascript_include_tag 'application' %>
        
  </head>
  <body>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <input id="storename" class="controls" type="text" placeholder="Store name">
    <button id=btn>Fetch store details</button>

             
    <script>
    
    function initMap() {
    "use strict"; 
    var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 16,
    });
    var place;
    var infoWindow = new google.maps.InfoWindow({map:map});
    
     // Create the search box and link it to the UI element.      
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    
    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function () {
        searchBox.setBounds(map.getBounds());
    });
    
    var markers = [];
    
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function () {
        var places = searchBox.getPlaces();

        if (places.length === 0) {
            return;
        }

      // Clear out the old markers.
        markers.forEach(function (marker) {
            marker.setMap(null);
        });
        markers = [];

      // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
            var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

        function saveData() {
                $.ajax({ 
                    type: "GET",
                    url: "/favorite_stores/new",
                    data: {name: place.name, address: place.formatted_address, lat: place.geometry.location.lat(), 
                            lng: place.geometry.location.lng(),
                        
                          }
            });
            }
        
        var service = new google.maps.places.PlacesService(map);
        service.getDetails({placeId: place.place_id
        }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {  
          
               markers.push(new google.maps.Marker({
                map: map,
                title: place.name,
                position: place.geometry.location,
                animation: google.maps.Animation.DROP,
                clickable: true,
                zoom: 12
            

            }));
              
              for (var i = 0; i < markers.length; i++) {
                var marker = markers[i];
              }

              marker.info = new google.maps.InfoWindow({
            content:  '<b>' + place.name + '</b>' + '<br/>' +  'Latitude: ' + place.geometry.location.lat() + '<br/>' + 'Longitude: ' + place.geometry.location.lng() + '<br/>' +  place.formatted_address + '<br/><button id=button>Save store</button>'
              });

       
              google.maps.event.addListener(marker, 'click', function() {
                  marker.info.open(map, this);
                  document.getElementById('button').onclick = saveData;
            
              });
          }
        });
                           
            
            if (place.geometry.viewport) {
            // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
            } else {
                bounds.extend(place.geometry.location);
            }
        });    
        
        map.fitBounds(bounds);

    });
          
    if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            var marker = new google.maps.Marker({
                position: pos,
                map: map,
                clickable: true
        });
        
            marker.info = new google.maps.InfoWindow({
            content: '<b>Your location</b>' + '<br/>' + 'Latitude: ' + position.coords.latitude + '<br/>' +  'Longitude: ' + position.coords.longitude
              });

              google.maps.event.addListener(marker, 'click', function() {
                  marker.info.open(map, marker);
              });
              infoWindow.close();
            map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }
      }
        
      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
      }
        

           

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWp2rBnoqUO57dNwFQW4nhQb_2Kxdmmx8&libraries=places&callback=initMap"
         async defer></script>
  </body>
</html>